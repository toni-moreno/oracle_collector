# -*- toml -*-


[general]

log_dir = "./log"
#Log level for main log 
log_level = "debug"

[self-monitor]

enabled = true
request_period = "30s"
measurement_prefix = "go_rt_"
extra_labels = {ifx_db="oraclecol",group="Exadata",release="Legacy"}


[output]

buffer_size = 10000
flush_period = "10s"
#batch_size = 1000

[oracle-discovery]

oracle_discovery_interval = "1m"
oracle_discovery_sid_regex = "^[oraxeasm].*_pmon_(?P<SID>[\\w]+)$"

oracle_connect_user= "system"
oracle_connect_pass= "xxxxxxx"
oracle_connect_dsn="server01_IP0:1521/SID"

extra_labels = {ifx_db="oracle_db",group="Exadata",release="Legacy"}

#Log level for all oracle interaction 
# trace,debug,info,warn/warning,error,fatal,panic
oracle_log_level = "debug"

[[oracle-discovery.dynamic-params]]

sid_regex=".*P[0-9]$"
extra_labels={environment="PRO"}
#oracle_connect_user= "user_pro"
#oracle_connect_pass= "pass_pro"
#oracle_connect_dns="server01_IP1:1521/SID"

[[oracle-discovery.dynamic-params]]

sid_regex=".*R[0-9]$"
extra_labels={environment="PRE"}
#oracle_connect_user= "user_pre"
#oracle_connect_pass= "pass_pre"
#oracle_connect_dns="server01_IP2:1531/SID"


[[oracle-discovery.dynamic-params]]

sid_regex=".*I[0-9]$"
extra_labels={environment="INT"}
#oracle_connect_user= "user_int"
#oracle_connect_pass= "pass_int"
#oracle_connect_dns="server01_IP3:1521/SID"


[[oracle-discovery.dynamic-params]]

sid_regex=".*D[0-9]$"
extra_labels={environment="DEV"}
#oracle_connect_user= "user_dev"
#oracle_connect_pass= "pass_dev"
#oracle_connect_dns="server01_IP4:1521/SID"


[[oracle-discovery.dynamic-params]]

sid_regex="^XE$"
extra_labels={environment="LAB"}
oracle_connect_dsn="192.168.1.84:1521/SID"

[oracle-monitor]

default_query_period = "60s"
default_query_timeout = "10s"

[[oracle-monitor.mgroup]]

name ="BaseMetrics"
query_period = "20s"
query_timeout = "5s"

[[oracle-monitor.mgroup.metric]]
context = "sessions"
labels = [ "status", "type" ]
metrics_desc = { value= "Gauge metric with count of sessions by status and type." }
metrics_type = { value='integer'}
request = "SELECT status, type, COUNT(*) as value FROM v$session GROUP BY status, type"


[[oracle-monitor.mgroup.metric]]
context = "resource"
labels = [ "resource_name" ]
metrics_desc = { current_utilization= "Generic counter metric from v$resource_limit view in Oracle (current value).", limit_value="Generic counter metric from v$resource_limit view in Oracle (UNLIMITED: -1)." }
metrics_type = { current_utilization='integer',limit_value='integer'}
request="SELECT resource_name,current_utilization,CASE WHEN TRIM(limit_value) LIKE 'UNLIMITED' THEN '-1' ELSE TRIM(limit_value) END as limit_value FROM v$resource_limit"

[[oracle-monitor.mgroup.metric]]
context = "activity"
metrics_desc = { value="Generic counter metric from v$sysstat view in Oracle." }
metrics_type = { value='integer'}
fieldtoappend = "name"
request = "SELECT name, value FROM v$sysstat WHERE name IN ('parse count (total)', 'execute count', 'user commits', 'user rollbacks')"


[[oracle-monitor.mgroup.metric]]
context = "wait_time"
metrics_desc = { value="Generic counter metric from v$waitclassmetric view in Oracle." }
metrics_type = { value='float'}
fieldtoappend= "wait_class"
request = '''
SELECT
  n.wait_class as WAIT_CLASS,
  round(m.time_waited/m.INTSIZE_CSEC,3) as VALUE
FROM
  v$waitclassmetric  m, v$system_wait_class n
WHERE
  m.wait_class_id=n.wait_class_id AND n.wait_class != 'Idle'
'''

[[oracle-monitor.mgroup.metric]]
context = "tablespace"
labels = [ "tablespace", "type" ]
metrics_desc = { bytes = "Generic counter metric of tablespaces bytes in Oracle.", max_bytes = "Generic counter metric of tablespaces max bytes in Oracle.", free = "Generic counter metric of tablespaces free bytes in Oracle.", used_percent = "Gauge metric showing as a percentage of how much of the tablespace has been used." }
metrics_type = { bytes = 'integer', max_bytes = 'integer', free='integer',used_percent='float'}
request = '''
SELECT
    dt.tablespace_name as tablespace,
    dt.contents as type,
    dt.block_size * dtum.used_space as bytes,
    dt.block_size * dtum.tablespace_size as max_bytes,
    dt.block_size * (dtum.tablespace_size - dtum.used_space) as free,
    dtum.used_percent
FROM  dba_tablespace_usage_metrics dtum, dba_tablespaces dt
WHERE dtum.tablespace_name = dt.tablespace_name
ORDER by tablespace
'''


[[oracle-monitor.mgroup]]

name ="ZabbixMetrics"
query_period = "60s"
query_timeout = "5s"

[[oracle-monitor.mgroup.metric]]
context = "process" #lista
metrics_desc = { proc_num="Gauge metric with count of processes." }
metrics_type = { proc_num='integer'}
request = "SELECT COUNT(*) as proc_num FROM v$process"
# pending sum PGA_USED_MEM, PGA_ALLOC_MEM,PGA_FREEABLE_MEM


[[oracle-monitor.mgroup.metric]]
#Fast Recovery Area Info
context = "fra"
metrics_desc = { value="Generic  metric from V$RECOVERY_FILE_DEST view in Oracle." }
# automaticaly removes trailig and leading " and ' from the fields.
# and transform to lowercase 
metrics_type = { space_limit='integer',space_used='integer',space_reclaimable='integer',number_of_files='integer',usable_pct='float',restore_point='integer'}
request = '''
SELECT *
FROM (
        SELECT 'space_limit' AS METRIC, SPACE_LIMIT AS VALUE FROM V$RECOVERY_FILE_DEST
        UNION
        SELECT 'space_used', SPACE_USED AS VALUE FROM   V$RECOVERY_FILE_DEST
        UNION
        SELECT 'space_reclaimable', SPACE_RECLAIMABLE AS VALUE FROM V$RECOVERY_FILE_DEST
        UNION
        SELECT 'number_of_files', NUMBER_OF_FILES AS VALUE FROM V$RECOVERY_FILE_DEST
        UNION
        SELECT 'usable_pct', DECODE(SPACE_LIMIT, 0, 0, (100 - (100 * (SPACE_USED - SPACE_RECLAIMABLE) / SPACE_LIMIT))) AS VALUE
        FROM  V$RECOVERY_FILE_DEST
        UNION
        SELECT 'restore_point', COUNT(*) AS VALUE FROM  V$RESTORE_POINT
        UNION
        SELECT
            DISTINCT *
        FROM
            TABLE(sys.ODCIVARCHAR2LIST('space_limit', 'space_used', 'space_reclaimable', 'number_of_files', 'usable_pct','restore_point')),
            TABLE(sys.ODCINUMBERLIST(0, 0, 0, 0, 0, 0))
        ) PIVOT (
        SUM(value) FOR METRIC in ('space_limit','space_used','space_reclaimable','number_of_files','usable_pct','restore_point'))
'''

[[oracle-monitor.mgroup.metric]]
#Program Global Area
# SQL> select name,unit,value from v$pgastat;
# NAME                                              ;UNIT      ;     VALUE
# --------------------------------------------------;----------;----------
# aggregate PGA target parameter(*)                 ;bytes     ;2147483648
# aggregate PGA auto target                         ;bytes     ; 662556672
# global memory bound(*)                            ;bytes     ; 214743040
# total PGA inuse(*)                                ;bytes     ;1411315712
# total PGA allocated(*)                            ;bytes     ;1592008704
# maximum PGA allocated                             ;bytes     ;2447543296
# total freeable PGA memory(*)                      ;bytes     ;  85917696
# MGA allocated (under PGA)                         ;bytes     ; 268435456
# maximum MGA allocated                             ;bytes     ; 268435456
# process count                                     ;          ;       122
# max processes count                               ;          ;       131
# PGA memory freed back to OS                       ;bytes     ;6673858560
# total PGA used for auto workareas                 ;bytes     ;         0
# maximum PGA used for auto workareas               ;bytes     ;  57823232
# total PGA used for manual workareas               ;bytes     ;         0
# maximum PGA used for manual workareas             ;bytes     ;   1067008
# over allocation count                             ;          ;      3650
# bytes processed                                   ;bytes     ;7.2459E+11
# extra bytes read/written                          ;bytes     ;         0
# cache hit percentage                              ;percent   ;       100
# recompute count (total)                           ;          ;   5286207
context = "pga"
metrics_desc = { value="Generic  metric from v$pgastat view in Oracle." }
metrics_type = { aggregate_pga_target_parameter='integer',global_memory_bound='integer',total_pga_inuse='integer',total_pga_allocated='integer',total_freeable_pga_memory='integer',cache_hit_percentage='float'}
request = '''
SELECT * from (
 SELECT REPLACE(LOWER(NAME),' ','_') AS NAME, VALUE FROM V$PGASTAT WHERE NAME IN
(
 'aggregate PGA target parameter',
 'global memory bound',
 'total PGA inuse',
 'total PGA allocated',
 'total freeable PGA memory',
 'cache hit percentage'
)) PIVOT (
SUM(value) FOR NAME in 
  ('aggregate_pga_target_parameter',
   'global_memory_bound',
   'total_pga_inuse',
   'total_pga_allocated',
   'total_freeable_pga_memory',
   'cache_hit_percentage'))
'''

[[oracle-monitor.mgroup.metric]]
# SGA (System Global Area)
context = "sga"
metrics_desc = { value="Generic  metric from v$sgastat view in Oracle." }
metrics_type = { value='integer'}
fieldtoappend= "pool"
request = '''
SELECT
	POOL, SUM(BYTES) AS VALUE
FROM (
	SELECT LOWER(REPLACE(POOL, ' ', '_')) AS POOL,SUM(BYTES) AS BYTES FROM	V$SGASTAT
	WHERE POOL IN ('java pool', 'large pool') GROUP BY POOL
	UNION
	SELECT 'shared_pool',SUM(BYTES)	FROM V$SGASTAT
	WHERE POOL = 'shared pool' AND NAME NOT IN ('library cache', 'dictionary cache', 'free memory', 'sql area')
	UNION
	SELECT	NAME,BYTES FROM	V$SGASTAT WHERE POOL IS NULL AND NAME IN ('log_buffer', 'fixed_sga')
	UNION
	SELECT 'buffer_cache',SUM(BYTES) FROM V$SGASTAT WHERE POOL IS NULL	AND NAME IN ('buffer_cache', 'db_block_buffers')
	UNION
	SELECT
		DISTINCT *
	FROM
		TABLE(sys.ODCIVARCHAR2LIST('buffer_cache', 'fixed_sga', 'java_pool', 'large_pool', 'log_buffer', 'shared_pool')),
		TABLE(sys.ODCINUMBERLIST(0, 0, 0, 0, 0, 0))
	) GROUP BY POOL
'''


[[oracle-monitor.mgroup.metric]]
# Systmetrics
# Getting only marked metrics with (*i) for integer or (*f) for floating point numbers

#  mid;REPLACE(LOWER(METRIC_NAME),' ','_')               ;     value;METRIC_UNIT
# ----;--------------------------------------------------;----------;--------------------------------------------------
# 2000;buffer_cache_hit_ratio(*f)                        ;       100;% (LogRead - PhyRead)/LogRead
# 2001;memory_sorts_ratio(*f)                            ;       100;% MemSort/(MemSort + DiskSort)
# 2002;redo_allocation_hit_ratio                         ;       100;% (#Redo - RedoSpaceReq)/#Redo
# 2003;user_transaction_per_sec                          ;         0;Transactions Per Second
# 2004;physical_reads_per_sec                            ;         0;Reads Per Second
# 2005;physical_reads_per_txn                            ;         0;Reads Per Txn
# 2006;physical_writes_per_sec                           ;         0;Writes Per Second
# 2007;physical_writes_per_txn                           ;         0;Writes Per Txn
# 2008;physical_reads_direct_per_sec                     ;         0;Reads Per Second
# 2009;physical_reads_direct_per_txn                     ;         0;Reads Per Txn
# 2010;physical_writes_direct_per_sec                    ;         0;Writes Per Second
# 2011;physical_writes_direct_per_txn                    ;         0;Writes Per Txn
# 2012;physical_reads_direct_lobs_per_sec                ;         0;Reads Per Second
# 2013;physical_reads_direct_lobs_per_txn                ;         0;Reads Per Txn
# 2014;physical_writes_direct_lobs_per_sec               ;         0;Writes Per Second
# 2015;physical_writes_direct_lobs__per_txn              ;         0;Writes Per Txn
# 2016;redo_generated_per_sec                            ;    2.3175;Bytes Per Second
# 2017;redo_generated_per_txn                            ;       140;Bytes Per Txn
# 2018;logons_per_sec(*f)                                ;    .13243;Logons Per Second
# 2019;logons_per_txn                                    ;         8;Logons Per Txn
# 2020;open_cursors_per_sec                              ;    .94355;Cursors Per Second
# 2021;open_cursors_per_txn                              ;        57;Cursors Per Txn
# 2022;user_commits_per_sec                              ;         0;Commits Per Second
# 2023;user_commits_percentage                           ;         0;% (UserCommit/TotalUserTxn)
# 2024;user_rollbacks_per_sec(*f)                        ;         0;Rollbacks Per Second
# 2025;user_rollbacks_percentage                         ;         0;% (UserRollback/TotalUserTxn)
# 2026;user_calls_per_sec                                ;    .94355;Calls Per Second
# 2027;user_calls_per_txn                                ;        57;Calls Per Txn
# 2028;recursive_calls_per_sec                           ;   8.69061;Calls Per Second
# 2029;recursive_calls_per_txn                           ;       525;Calls Per Txn
# 2030;logical_reads_per_sec                             ;   2.33405;Reads Per Second
# 2031;logical_reads_per_txn                             ;       141;Reads Per Txn
# 2032;dbwr_checkpoints_per_sec                          ;         0;Check Points Per Second
# 2033;background_checkpoints_per_sec                    ;         0;Check Points Per Second
# 2034;redo_writes_per_sec                               ;    .01655;Writes Per Second
# 2035;redo_writes_per_txn                               ;         1;Writes Per Txn
# 2036;long_table_scans_per_sec(*f)                      ;         0;Scans Per Second
# 2037;long_table_scans_per_txn                          ;         0;Scans Per Txn
# 2038;total_table_scans_per_sec                         ;    .06621;Scans Per Second
# 2039;total_table_scans_per_txn                         ;         4;Scans Per Txn
# 2040;full_index_scans_per_sec                          ;         0;Scans Per Second
# 2041;full_index_scans_per_txn                          ;         0;Scans Per Txn
# 2042;total_index_scans_per_sec                         ;    .84423;Scans Per Second
# 2043;total_index_scans_per_txn                         ;        51;Scans Per Txn
# 2044;total_parse_count_per_sec                         ;    .31452;Parses Per Second
# 2045;total_parse_count_per_txn                         ;        19;Parses Per Txn
# 2046;hard_parse_count_per_sec                          ;    .01655;Parses Per Second
# 2047;hard_parse_count_per_txn                          ;         1;Parses Per Txn
# 2048;parse_failure_count_per_sec                       ;         0;Parses Per Second
# 2049;parse_failure_count_per_txn                       ;         0;Parses Per Txn
# 2050;cursor_cache_hit_ratio(*f)                        ; 266.66667;% CursorCacheHit/SoftParse
# 2051;disk_sort_per_sec                                 ;         0;Sorts Per Second
# 2052;disk_sort_per_txn                                 ;         0;Sorts Per Txn
# 2053;rows_per_sort(*f)                                 ;     10.75;Rows Per Sort
# 2054;execute_without_parse_ratio                       ;  69.84127;% (ExecWOParse/TotalExec)
# 2055;soft_parse_ratio                                  ;  94.73684;% SoftParses/TotalParses
# 2056;user_calls_ratio                                  ;   9.79381;% UserCalls/AllCalls
# 2057;host_cpu_utilization_(%)                          ;   2.30796;% Busy/(Idle+Busy)
# 2058;network_traffic_volume_per_sec                    ;1057.57325;Bytes Per Second
# 2059;enqueue_timeouts_per_sec(*f)                      ;         0;Timeouts Per Second
# 2060;enqueue_timeouts_per_txn                          ;         0;Timeouts Per Txn
# 2061;enqueue_waits_per_sec                             ;         0;Waits Per Second
# 2062;enqueue_waits_per_txn                             ;         0;Waits Per Txn
# 2063;enqueue_deadlocks_per_sec                         ;         0;Deadlocks Per Second
# 2064;enqueue_deadlocks_per_txn                         ;         0;Deadlocks Per Txn
# 2065;enqueue_requests_per_sec                          ;  11.53782;Requests Per Second
# 2066;enqueue_requests_per_txn                          ;       697;Requests Per Txn
# 2067;db_block_gets_per_sec                             ;     .2152;Blocks Per Second
# 2068;db_block_gets_per_txn                             ;        13;Blocks Per Txn
# 2069;consistent_read_gets_per_sec                      ;   2.11885;Blocks Per Second
# 2070;consistent_read_gets_per_txn                      ;       128;Blocks Per Txn
# 2071;db_block_changes_per_sec                          ;         0;Blocks Per Second
# 2072;db_block_changes_per_txn                          ;         0;Blocks Per Txn
# 2073;consistent_read_changes_per_sec                   ;         0;Blocks Per Second
# 2074;consistent_read_changes_per_txn                   ;         0;Blocks Per Txn
# 2075;cpu_usage_per_sec                                 ;    .75692;CentiSeconds Per Second
# 2076;cpu_usage_per_txn                                 ;   45.7257;CentiSeconds Per Txn
# 2077;cr_blocks_created_per_sec                         ;         0;Blocks Per Second
# 2078;cr_blocks_created_per_txn                         ;         0;Blocks Per Txn
# 2079;cr_undo_records_applied_per_sec                   ;         0;Undo Records Per Second
# 2080;cr_undo_records_applied_per_txn                   ;         0;Records Per Txn
# 2081;user_rollback_undorec_applied_per_sec             ;         0;Records Per Second
# 2082;user_rollback_undo_records_applied_per_txn        ;         0;Records Per Txn
# 2083;leaf_node_splits_per_sec                          ;         0;Splits Per Second
# 2084;leaf_node_splits_per_txn                          ;         0;Splits Per Txn
# 2085;branch_node_splits_per_sec                        ;         0;Splits Per Second
# 2086;branch_node_splits_per_txn                        ;         0;Splits Per Txn
# 2087;px_downgraded_1_to_25%_per_sec                    ;         0;PX Operations Per Second
# 2088;px_downgraded_25_to_50%_per_sec                   ;         0;PX Operations Per Second
# 2089;px_downgraded_50_to_75%_per_sec                   ;         0;PX Operations Per Second
# 2090;px_downgraded_75_to_99%_per_sec                   ;         0;PX Operations Per Second
# 2091;px_downgraded_to_serial_per_sec                   ;         0;PX Operations Per Second
# 2092;physical_read_total_io_requests_per_sec           ;   3.12862;Requests Per Second
# 2093;physical_read_total_bytes_per_sec                 ;51259.3279;Bytes Per Second
# 2094;gc_cr_block_received_per_second                   ;         0;Blocks Per Second
# 2095;gc_cr_block_received_per_txn                      ;         0;Blocks Per Txn
# 2096;gc_current_block_received_per_second              ;         0;Blocks Per Second
# 2097;gc_current_block_received_per_txn                 ;         0;Blocks Per Txn
# 2098;global_cache_average_cr_get_time                  ;         0;CentiSeconds Per Get
# 2099;global_cache_average_current_get_time             ;         0;CentiSeconds Per Get
# 2100;physical_write_total_io_requests_per_sec          ;    .82768;Requests Per Second
# 2101;global_cache_blocks_corrupted(*i)                 ;         0;Blocks
# 2102;global_cache_blocks_lost(*i)                      ;         0;Blocks
# 2103;current_logons_count                              ;        95;Logons
# 2104;current_open_cursors_count                        ;       147;Cursors
# 2105;user_limit_%                                      ;         0;% Sessions/License_Limit
# 2106;sql_service_response_time(*f)                     ;   1.50134;CentiSeconds Per Call
# 2107;database_wait_time_ratio(*f)                      ;  94.76692;% Wait/DB_Time
# 2108;database_cpu_time_ratio(*f)                       ;   5.23308;% Cpu/DB_Time
# 2109;response_time_per_txn                             ;  873.7824;CentiSeconds Per Txn
# 2110;row_cache_hit_ratio                               ;       100;% Hits/Gets
# 2111;row_cache_miss_ratio                              ;         0;% Misses/Gets
# 2112;library_cache_hit_ratio(*f)                       ;  95.76271;% Hits/Pins
# 2113;library_cache_miss_ratio                          ;   4.23729;% Misses/Gets
# 2114;shared_pool_free_%(*f)                            ;   9.66625;% Free/Total
# 2115;pga_cache_hit_%                                   ;       100;% Bytes/TotalBytes
# 2118;process_limit_%                                   ;  14.52381;% Processes/Limit
# 2119;session_limit_%                                   ;  11.47287;% Sessions/Limit
# 2120;executions_per_txn                                ;        63;Executes Per Txn
# 2121;executions_per_sec                                ;   1.04287;Executes Per Second
# 2122;txns_per_logon                                    ;         0;Txns Per Logon
# 2123;database_time_per_sec                             ;   14.4642;CentiSeconds Per Second
# 2124;physical_write_total_bytes_per_sec                ;13035.1929;Bytes Per Second
# 2125;physical_read_io_requests_per_sec(*f)             ;         0;Requests Per Second
# 2126;physical_read_bytes_per_sec(*f)                   ;         0;Bytes Per Second
# 2127;physical_write_io_requests_per_sec(*f)            ;         0;Requests Per Second
# 2128;physical_write_bytes_per_sec(*f)                  ;         0;Bytes Per Second
# 2129;db_block_changes_per_user_call                    ;         0;Blocks Per Call
# 2130;db_block_gets_per_user_call                       ;    .22807;Blocks Per Call
# 2131;executions_per_user_call                          ;   1.10526;Executes Per Call
# 2132;logical_reads_per_user_call                       ;   2.47368;Reads Per Call
# 2133;total_sorts_per_user_call(*f)                     ;    .07018;Sorts Per Call
# 2134;total_table_scans_per_user_call                   ;    .07018;Tables Per Call
# 2135;current_os_load                                   ;    .25977;Number Of Processes
# 2136;streams_pool_usage_percentage                     ;         0;% Memory allocated / Size of Streams pool
# 2137;pq_qc_session_count                               ;         0;Sessions
# 2138;pq_slave_session_count                            ;         0;Sessions
# 2139;queries_parallelized_per_sec                      ;         0;Queries Per Second
# 2140;dml_statements_parallelized_per_sec               ;         0;Statements Per Second
# 2141;ddl_statements_parallelized_per_sec               ;         0;Statements Per Second
# 2142;px_operations_not_downgraded_per_sec              ;         0;PX Operations Per Second
# 2143;session_count                                     ;       148;Sessions
# 2144;average_synchronous_single-block_read_latency     ;    .02632;Milliseconds
# 2145;i/o_megabytes_per_second                          ;    .06621;Megabtyes per Second
# 2146;i/o_requests_per_second                           ;   4.05562;Requests per Second
# 2147;average_active_sessions(*f)                       ;    .14464;Active Sessions
# 2148;active_serial_sessions(*i)                        ;         1;Sessions
# 2149;active_parallel_sessions(*i)                      ;         0;Sessions
# 2150;captured_user_calls                               ;         0;calls
# 2151;replayed_user_calls                               ;         0;calls
# 2152;workload_capture_and_replay_status                ;         0;status
# 2153;background_cpu_usage_per_sec                      ;   4.64164;CentiSeconds Per Second
# 2154;background_time_per_sec                           ;    .02887;Active Sessions
# 2155;host_cpu_usage_per_sec                            ;  45.73746;CentiSeconds Per Second
# 2156;cell_physical_io_interconnect_bytes               ;   3884032;bytes
# 2157;temp_space_used                                   ;         0;bytes
# 2158;total_pga_allocated                               ;1591926784;bytes
# 2159;total_pga_used_by_sql_workareas                   ;         0;bytes
# 2160;run_queue_per_sec                                 ;         0;Processes
# 2161;vm_in_bytes_per_sec                               ;         0;bytes per sec
# 2162;vm_out_bytes_per_sec                              ;         0;bytes per sec
context = "sysmetrics"
metrics_desc = { value="Generic  metric from v$sysmetrics view in Oracle." }
metrics_type = { value='float'}  # most of metrics are floating point numbers
fieldtoappend= "metric"
request = '''
SELECT REPLACE(LOWER(METRIC_NAME),' ','_') AS metric, VALUE
 FROM V$SYSMETRIC WHERE
 METRIC_ID IN (
      2000,2001,2018,2024,2036,2050,2051,
      2053,2059,2094,2101,2102,2106,2107,
      2108,2112,2114,2125,2126,2127,2128,
      2133,2147,2148,2149,2157)
 AND GROUP_ID=2
'''


[[oracle-monitor.mgroup]]

name ="AsmMetrics"
instance_filter = "ASM"
query_period = "60s"
query_timeout = "10s"

[[oracle-monitor.mgroup.metric]]
context = "asm_diskgroup"
labels = [ "name" ]
metrics_desc = { total = "Total size of ASM disk group.", free = "Free space available on ASM disk group." }
metrics_type = { total = 'integer', free = 'integer'}
request = "SELECT name,total_mb*1024*1024 as total,free_mb*1024*1024 as free FROM v$asm_diskgroup_stat where exists (select 1 from v$datafile where name like '+%')"
ignorezeroresult = true

[[oracle-monitor.mgroup.metric]]
context = "diskgroup_size"
labels = [ "inst_id", "node_name" , "instance_name", "diskgroup_name" ]
metrics_desc = { total = "Total size of ASM disk group in MB.", free = "Free space available on ASM disk group in MB." }
metrics_type = { total = 'integer', free='integer'}
request = '''
SELECT instance_number            AS inst_id,
       host_name                  AS node_name,
       instance_name,
       name                       AS diskgroup_name,
       total_mb * 1024 * 1024     AS total,
       free_mb * 1024 * 1024      AS free
  FROM v$asm_diskgroup_stat, v$instance
'''
ignorezeroresult = true

[[oracle-monitor.mgroup.metric]]
context = "asmuptime"
labels = [ "inst_id", "node_name", "instance_name"]
metrics_desc = { uptime = "ASM uptime" }
netrics_type = { uptime = 'integer'}
request = '''
SELECT instance_number                      AS inst_id,
       host_name                            AS node_name,
       instance_name,
       (SYSDATE - startup_time) * 86400     AS uptime
  FROM v$instance
'''

[[oracle-monitor.mgroup.metric]]
context = "asm_dg_stat"
labels = [ "inst_id", "diskgroup_name", "node_name", "instance_name" ]
metrics_desc = { reads = "Total number of I/O read requests for the DG.", writes = "Total number of I/O write requests for the DG.", bytes_read = "Total number of bytes read from the DG", bytes_written = "Total number of bytes written from the DG", iops = "Total number of I/O requests for the DG" }
metrics_type = { reads = "counter", writes = "counter", bytes_read = "counter", bytes_written = "counter", iops = "counter" }
request = '''
 SELECT i.instance_number              AS inst_id,
        i.host_name                    AS node_name,
        i.instance_name,
        g.name                         AS diskgroup_name,
        SUM (ds.reads)                 AS reads,
        SUM (ds.writes)                AS writes,
        SUM (ds.bytes_read)            AS bytes_read,
        SUM (ds.bytes_written)         AS bytes_written,
        SUM (ds.reads + ds.writes)     AS iops
   FROM v$asm_disk_stat ds, v$asm_diskgroup_stat g, v$instance i
  WHERE ds.mount_status = 'CACHED' AND ds.group_number = g.group_number
GROUP BY i.instance_number,
        i.host_name,
        i.instance_name,
        g.name
'''

[[oracle-monitor.mgroup.metric]]
context = "asm_disk_stat"
labels = [ "inst_id", "node_name", "instance_name", "diskgroup_name", "disk_number", "failgroup", "path" ]
metrics_desc = { reads = "Total number of I/O read requests for the DG.", writes = "Total number of I/O write requests for the DG.", read_time = "Total I/O time (in hundreths of a second) for read requests for the disk", write_time = "Total I/O time (in hundreths of a second) for write requests for the disk", bytes_read = "Total number of bytes read from the DG", bytes_written = "Total number of bytes written from the DG", iops = "Total number of I/O requests for the DG" }
metrics_type = { reads = "counter", writes = "counter", bytes_read = "counter", read_time = "counter", write_time = "counter", bytes_written = "counter", iops = "counter" }
request = '''
  SELECT i.instance_number                         AS inst_id,
         i.host_name                               AS node_name,
         i.instance_name,
         g.name                                    AS diskgroup_name,
         ds.disk_number                            AS disk_number,
         ds.failgroup                              AS failgroup,
         ds.reads                                  AS reads,
         ds.writes                                 AS writes,
         ds.read_time * 1000                       AS read_time,
         ds.write_time * 1000                      AS write_time,
         ds.bytes_read                             AS bytes_read,
         ds.bytes_written                          AS bytes_written,
         REGEXP_REPLACE (ds.PATH, '.*/\', '\')     AS PATH,
         ds.reads + ds.writes                      AS iops  
    FROM v$asm_disk_stat ds, v$asm_diskgroup_stat g, v$instance i
   WHERE ds.mount_status = 'CACHED' AND ds.group_number = g.group_number
'''

[[oracle-monitor.mgroup.metric]]
context = "asm_space_consumers"
labels = [ "inst_id", "diskgroup_name", "node_name", "instance_name", "sid", "file_type" ]
metrics_desc = { size_mb = "Total space usage by db by file_type" , files = "Number of files by db by type" }
metrics_type = { size_mb = 'integer', files ='integer'}
request = '''
  SELECT i.instance_number                     AS inst_id,
         i.host_name                           AS node_name,
         i.instance_name,
         gname                                 AS diskgroup_name,
         dbname                                AS sid,
         file_type,
         ROUND (SUM (space) / 1024 / 1024)     size_mb,
         COUNT (*)                             AS files
    FROM v$instance i,
         (SELECT gname,
                 REGEXP_SUBSTR (full_alias_path,
                                '[[:alnum:]_]*',
                                1,
                                4)    dbname,
                 file_type,
                 space,
                 aname,
                 system_created,
                 alias_directory
            FROM (    SELECT CONCAT ('+' || gname,
                                     SYS_CONNECT_BY_PATH (aname, '/'))
                                 full_alias_path,
                             system_created,
                             alias_directory,
                             file_type,
                             space,
                             LEVEL,
                             gname,
                             aname
                        FROM (SELECT b.name                gname,
                                     a.parent_index        pindex,
                                     a.name                aname,
                                     a.reference_index     rindex,
                                     a.system_created,
                                     a.alias_directory,
                                     c.TYPE                file_type,
                                     c.space
                                FROM v$asm_alias a, v$asm_diskgroup b, v$asm_file c
                               WHERE     a.group_number = b.group_number
                                     AND a.group_number = c.group_number(+)
                                     AND a.file_number = c.file_number(+)
                                     AND a.file_incarnation = c.incarnation(+))
                  START WITH     (MOD (pindex, POWER (2, 24))) = 0
                             AND rindex IN
                                     (SELECT a.reference_index
                                        FROM v$asm_alias a, v$asm_diskgroup b
                                       WHERE     a.group_number =
                                                 b.group_number
                                             AND (MOD (a.parent_index,
                                                       POWER (2, 24))) =
                                                 0)
                  CONNECT BY PRIOR rindex = pindex)
           WHERE NOT file_type IS NULL AND system_created = 'Y')
GROUP BY i.instance_number,
         i.host_name,
         i.instance_name,
         gname,
         dbname,
         file_type
'''

[[oracle-monitor.mgroup]]

name ="CustomMetrics"
query_period = "5m"
query_timeout = "5s"

[[oracle-monitor.mgroup.metric]]
context = "slow_queries"
metrics_desc = { p95_time_usecs= "Gauge metric with percentile 95 of elapsed time.", p99_time_usecs= "Gauge metric with percentile 99 of elapsed time." }
metrics_type = { p95_time_usecs='float', p99_time_usecs='float'}
request = "select  percentile_disc(0.95)  within group (order by elapsed_time) as p95_time_usecs, percentile_disc(0.99)  within group (order by elapsed_time) as p99_time_usecs from v$sql where last_active_time >= sysdate - 5/(24*60)"

[[oracle-monitor.mgroup.metric]]
context = "big_queries"
metrics_desc = { p95_rows= "Gauge metric with percentile 95 of returned rows.", p99_rows= "Gauge metric with percentile 99 of returned rows." }
metrics_type = { p95_rows= 'integer', p99_rows='integer'}
request = "select  percentile_disc(0.95)  within group (order by rownum) as p95_rows, percentile_disc(0.99)  within group (order by rownum) as p99_rows from v$sql where last_active_time >= sysdate - 5/(24*60)"

[[oracle-monitor.mgroup.metric]]
context = "size_user_segments_top100"
metrics_desc = {table_bytes="Gauge metric with the size of the tables in user segments."}
metrics_type = {table_bytes='integer'}
labels = ["segment_name"]
request = "select * from (select segment_name,sum(bytes) as table_bytes from user_segments where segment_type='TABLE' group by segment_name) order by table_bytes DESC FETCH NEXT 100 ROWS ONLY"

[[oracle-monitor.mgroup.metric]]
context = "size_user_segments_top100"
metrics_desc = {table_partition_bytes="Gauge metric with the size of the table partition in user segments."}
metrics_type = {table_partition_bytes="integer"}
labels = ["segment_name"]
request = "select * from (select segment_name,sum(bytes) as table_partition_bytes from user_segments where segment_type='TABLE PARTITION' group by segment_name) order by table_partition_bytes DESC FETCH NEXT 100 ROWS ONLY"

[[oracle-monitor.mgroup.metric]]
context = "size_user_segments_top100"
metrics_desc = {cluster_bytes="Gauge metric with the size of the cluster in user segments."}
metrics_type = {cluster_bytes='integer'}
labels = ["segment_name"]
request = "select * from (select segment_name,sum(bytes) as cluster_bytes from user_segments where segment_type='CLUSTER' group by segment_name) order by cluster_bytes DESC FETCH NEXT 100 ROWS ONLY"

[[oracle-monitor.mgroup.metric]]
context = "size_dba_segments_top100"
metrics_desc = {table_bytes="Gauge metric with the size of the tables in dba segments."}
metrics_type = {table_bytes='integer'}
labels = ["segment_name"]
request = "select * from (select segment_name,sum(bytes) as table_bytes from dba_segments where segment_type='TABLE' group by segment_name) order by table_bytes DESC FETCH NEXT 100 ROWS ONLY"

[[oracle-monitor.mgroup.metric]]
context = "size_dba_segments_top100"
metrics_desc = {table_partition_bytes="Gauge metric with the size of the table partition in dba segments."}
metrics_type = {table_partition_bytes='integer' }
labels = ["segment_name"]
request = "select * from (select segment_name,sum(bytes) as table_partition_bytes from dba_segments where segment_type='TABLE PARTITION' group by segment_name) order by table_partition_bytes DESC FETCH NEXT 100 ROWS ONLY"

[[oracle-monitor.mgroup.metric]]
context = "size_dba_segments_top100"
metrics_desc = {cluster_bytes="Gauge metric with the size of the cluster in dba segments."}
metrics_type = {cluster_bytes='integer'}
labels = ["segment_name"]
request = "select * from (select segment_name,sum(bytes) as cluster_bytes from dba_segments where segment_type='CLUSTER' group by segment_name) order by cluster_bytes DESC FETCH NEXT 100 ROWS ONLY"

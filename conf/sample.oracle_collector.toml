# -*- toml -*-


[general]

log_dir = "./log"
#Log level for main log 
log_level = "debug"

[self-monitor]

enabled = true
request_period = "60s"
#Measurement names will be
# prefix + "runtime" + "XXX" ( for New Go Runtime  Stats -- https://pkg.go.dev/runtime/metrics --)
# prefix + "runtime_gvm_stats" ( for Go Legacy Runtime  Stats)
# prefix + "collect_stats" ( for Query Stats )
# prefix + "discover_stats" ( for Discovery Stats )
# prefix + "sql_driver_stats" ( for Cliend side driver stats)
measurement_prefix = "oc_"
# labels/tags for self-monitoring will be contatenated/overwritted to the discovery extra_labels
extra_labels = {ifx_db="oraclecol",group="Exadata",release="Legacy"}


[output]

buffer_size = 10000
flush_period = "10s"
#batch_size = 1000

[oracle-discovery]

oracle_clusterware_enabled = true 

oracle_discovery_interval = "1m"
oracle_discovery_sid_regex = "^[oraxeasm].*_pmon_(?P<SID>[\\w]+)$"

oracle_connect_user="C##MONIT"
oracle_connect_pass="XXXYYY"
oracle_connect_dsn="server01_IP0:1521/SID"

extra_labels = {ifx_db="oracle_db",group="Exadata",release="Legacy"}

oracle_status_extended_info = false

#Log level for all oracle interaction 
# trace,debug,info,warn/warning,error,fatal,panic
# oracle_log_level = "error" #on PRO
oracle_log_level = "debug"  #on LAB

[[oracle-discovery.dynamic-params]]

sid_regex=".*P[0-9]$"
extra_labels={environment="PRO"}
#oracle_connect_user= "user_pro"
#oracle_connect_pass= "pass_pro"
#oracle_connect_dsn="server01_IP1:1521/SID"

[[oracle-discovery.dynamic-params]]

sid_regex=".*R[0-9]$"
extra_labels={environment="PRE"}
#oracle_connect_user= "user_pre"
#oracle_connect_pass= "pass_pre"
#oracle_connect_dsn="server01_IP2:1531/SID"


[[oracle-discovery.dynamic-params]]

sid_regex=".*I[0-9]$"
extra_labels={environment="INT"}
#oracle_connect_user= "user_int"
#oracle_connect_pass= "pass_int"
#oracle_connect_dsn="server01_IP3:1521/SID"


[[oracle-discovery.dynamic-params]]

sid_regex=".*D[0-9]$"
extra_labels={environment="DEV"}
#oracle_connect_user= "user_dev"
#oracle_connect_pass= "pass_dev"
#oracle_connect_dsn="server01_IP4:1521/SID"


[[oracle-discovery.dynamic-params]]

sid_regex="^XE$"
extra_labels={environment="LAB"}
oracle_connect_dsn="192.168.1.84:1521/SID"

[oracle-monitor]

default_query_period = "60s"
default_query_timeout = "10s"


[[oracle-monitor.mgroup]]

name ="BaseMetrics_1m_DB"
query_level = "db"
query_period = "60s"
query_timeout = "5s"


[[oracle-monitor.mgroup.metric]]
context = "activity"
metrics_desc = { value="Generic counter metric from v$sysstat view in Oracle." }
metrics_type = { value='integer'}
fieldtoappend = "name"
request = "SELECT name, value FROM v$sysstat WHERE name IN ('parse count (total)', 'execute count', 'user commits', 'user rollbacks')"
#https://docs.oracle.com/cd/E11882_01/server.112/e40402/stats002.htm#i375475 ( v$sysstat description)
#https://doyensys.com/blogs/query-to-find-to-soft-parse-and-hard-parse-ratio/ ?

[[oracle-monitor.mgroup.metric]]
context = "wait_stats"
labels = ["wait_class"]
metrics_desc = { value="Generic counter metric from v$waitclassmetric view in Oracle." }
metrics_type = { time_wait='float', wait_count='integer',dbtime_wait_pct='float'}
#fieldtoappend= "wait_class"
request = '''
SELECT
  n.wait_class as WAIT_CLASS,
  round(m.time_waited/m.INTSIZE_CSEC,6) as time_wait,
  m.wait_count as wait_count,
  m.dbtime_in_wait as dbtime_wait_pct
FROM
  v$waitclassmetric  m, v$system_wait_class n
WHERE
  m.wait_class_id=n.wait_class_id AND n.wait_class != 'Idle'
'''

[[oracle-monitor.mgroup.metric]]
#Fast Recovery Area Info
context = "fra"
metrics_desc = { value="Generic  metric from V$RECOVERY_FILE_DEST view in Oracle." }
# automaticaly removes trailig and leading " and ' from the fields.
# and transform to lowercase 
metrics_type = { space_limit='integer',space_used='integer',space_reclaimable='integer',number_of_files='integer',usable_pct='float',restore_point='integer'}
request = '''
SELECT *
FROM (
        SELECT 'space_limit' AS METRIC, SPACE_LIMIT AS VALUE FROM V$RECOVERY_FILE_DEST
        UNION
        SELECT 'space_used', SPACE_USED AS VALUE FROM   V$RECOVERY_FILE_DEST
        UNION
        SELECT 'space_reclaimable', SPACE_RECLAIMABLE AS VALUE FROM V$RECOVERY_FILE_DEST
        UNION
        SELECT 'number_of_files', NUMBER_OF_FILES AS VALUE FROM V$RECOVERY_FILE_DEST
        UNION
        SELECT 'usable_pct', DECODE(SPACE_LIMIT, 0, 0, (100 - (100 * (SPACE_USED - SPACE_RECLAIMABLE) / SPACE_LIMIT))) AS VALUE
        FROM  V$RECOVERY_FILE_DEST
        UNION
        SELECT 'restore_point', COUNT(*) AS VALUE FROM  V$RESTORE_POINT
        UNION
        SELECT
            DISTINCT *
        FROM
            TABLE(sys.ODCIVARCHAR2LIST('space_limit', 'space_used', 'space_reclaimable', 'number_of_files', 'usable_pct','restore_point')),
            TABLE(sys.ODCINUMBERLIST(0, 0, 0, 0, 0, 0))
        ) PIVOT (
        SUM(value) FOR METRIC in ('space_limit','space_used','space_reclaimable','number_of_files','usable_pct','restore_point'))
'''

[[oracle-monitor.mgroup.metric]]
# ArchiveLog
context = "archivelog"
labels = [ "dest_name" ]
metrics_desc = { value="information from archivelogs only when logs in archivelog mode and status active" }
metrics_type = { status='integer',log_sequence='integer', error_label='string'}
request = '''
SELECT
    d.DEST_NAME as DEST_NAME,
    DECODE(d.STATUS, 'VALID', 3, 'DEFERRED', 2, 'ERROR', 1, 0) as STATUS,
    d.LOG_SEQUENCE as LOG_SEQUENCE,
    NVL(TO_CHAR(d.ERROR), ' ') as ERROR_LABEL		
FROM
    V$ARCHIVE_DEST d,
    V$DATABASE db
WHERE 
    d.STATUS != 'INACTIVE' 
    AND db.LOG_MODE = 'ARCHIVELOG'
'''


[[oracle-monitor.mgroup]]

name ="BaseMetrics_10m_INST"
query_period = "600s"
query_timeout = "15s"

[[oracle-monitor.mgroup.metric]]
# RedoLog
context = "redolog"
metrics_desc = { value="Number of available for log switching inactive/unused REDO logs" }
metrics_type = { available='integer'}
request = '''
		SELECT
			COUNT(*) as available
		FROM
			V$LOG	
		WHERE 
			STATUS IN ('INACTIVE', 'UNUSED')
'''


[[oracle-monitor.mgroup]]

name ="BaseMetrics_1m_INST"
query_period = "60s"
query_timeout = "5s"

[[oracle-monitor.mgroup.metric]]
# Resource
context = "base_cpu_mem"
metrics_desc = { value="CPU , Mem consumption per Instance" }
# automaticaly removes trailig and leading " and ' from the fields.
# and transform to lowercase
# Info here:
# https://dbakevlar.com/2013/08/oracle-cpu-time/
metrics_type = { total_sga_bytes='integer',total_allocated_pga_bytes='integer',max_allocated_pga_bytes='integer',total_allocated_mem_bytes='integer',total_host_cpu_pct='float'}
request='''
SELECT *
FROM (
        SELECT 'total_sga_bytes' as METRIC, sum(value) as value FROM v$sga
        UNION
        select 'total_allocated_pga_bytes', value from V$PGASTAT where name='total PGA allocated'
        UNION
        select 'max_allocated_pga_bytes', value from V$PGASTAT where name='maximum PGA allocated'
        UNION
        select 'total_allocated_mem_bytes', (select sum(value) from v$sga)+(select value from V$PGASTAT where name='maximum PGA allocated') as value from dual
        UNION
        select 'total_host_cpu_pct' , value from v$sysmetric where metric_name='CPU Usage Per Sec' and group_id=2
        UNION
        SELECT
                DISTINCT *
        FROM
                TABLE(sys.ODCIVARCHAR2LIST('total_sga_bytes', 'total_allocated_pga_bytes','max_allocated_pga_bytes','total_allocated_mem_bytes', 'total_host_cpu_pct')),
                TABLE(sys.ODCINUMBERLIST(0, 0, 0, 0,0))
        )PIVOT (SUM(value) FOR METRIC in ('total_sga_bytes','total_allocated_pga_bytes','max_allocated_pga_bytes','total_allocated_mem_bytes','total_host_cpu_pct'))
'''

[[oracle-monitor.mgroup.metric]]
# Resource
context = "resource"
labels = [ "resource_name" ]
metrics_desc = { current_utilization= "Generic counter metric from v$resource_limit view in Oracle (current value).", limit_value="Generic counter metric from v$resource_limit view in Oracle (UNLIMITED: -1)." }
metrics_type = { current_utilization='integer',limit_value='integer',used_pct='float'}
## tiene sentido monitorizar los "unlimited" ?
request='''
SELECT 
    resource_name,
    current_utilization,
    CASE WHEN TRIM(limit_value) LIKE 'UNLIMITED' THEN '-1' ELSE TRIM(limit_value) END as limit_value,
    CASE 
        WHEN TRIM(limit_value) LIKE 'UNLIMITED' THEN 0 
        WHEN TRIM(limit_value) LIKE '0' THEN 0
        ELSE ROUND(((current_utilization*100)/limit_value),3)
    END as USED_PCT
FROM v$resource_limit
'''

[[oracle-monitor.mgroup.metric]]
context = "process" #lista
metrics_desc = { proc_num="Gauge metric with count of processes." }
metrics_type = { proc_num='integer'}
request = "SELECT COUNT(*) as proc_num FROM v$process"
# pending sum PGA_USED_MEM, PGA_ALLOC_MEM,PGA_FREEABLE_MEM
# group by PNAME ?




[[oracle-monitor.mgroup.metric]]
#Program Global Area
# SQL> select name,unit,value from v$pgastat;
# NAME                                              ;UNIT      ;     VALUE
# --------------------------------------------------;----------;----------
# aggregate PGA target parameter(*)                 ;bytes     ;2147483648
# aggregate PGA auto target                         ;bytes     ; 662556672
# global memory bound(*)                            ;bytes     ; 214743040
# total PGA inuse(*)                                ;bytes     ;1411315712
# total PGA allocated(*)                            ;bytes     ;1592008704
# maximum PGA allocated                             ;bytes     ;2447543296
# total freeable PGA memory(*)                      ;bytes     ;  85917696
# MGA allocated (under PGA)                         ;bytes     ; 268435456
# maximum MGA allocated                             ;bytes     ; 268435456
# process count                                     ;          ;       122
# max processes count                               ;          ;       131
# PGA memory freed back to OS                       ;bytes     ;6673858560
# total PGA used for auto workareas                 ;bytes     ;         0
# maximum PGA used for auto workareas               ;bytes     ;  57823232
# total PGA used for manual workareas               ;bytes     ;         0
# maximum PGA used for manual workareas             ;bytes     ;   1067008
# over allocation count                             ;          ;      3650
# bytes processed                                   ;bytes     ;7.2459E+11
# extra bytes read/written                          ;bytes     ;         0
# cache hit percentage                              ;percent   ;       100
# recompute count (total)                           ;          ;   5286207
context = "pga"
metrics_desc = { value="Generic  metric from v$pgastat view in Oracle." }
metrics_type = { aggregate_pga_target_parameter='integer',global_memory_bound='integer',total_pga_inuse='integer',total_pga_allocated='integer',total_freeable_pga_memory='integer',cache_hit_percentage='float'}
request = '''
SELECT * from (
 SELECT REPLACE(LOWER(NAME),' ','_') AS NAME, VALUE FROM V$PGASTAT WHERE NAME IN
(
 'aggregate PGA target parameter',
 'global memory bound',
 'total PGA inuse',
 'total PGA allocated',
 'total freeable PGA memory',
 'cache hit percentage'
)) PIVOT (
SUM(value) FOR NAME in 
  ('aggregate_pga_target_parameter',
   'global_memory_bound',
   'total_pga_inuse',
   'total_pga_allocated',
   'total_freeable_pga_memory',
   'cache_hit_percentage'))
'''

[[oracle-monitor.mgroup.metric]]
# SGA (System Global Area)
context = "sga"
metrics_desc = { value="Generic  metric from v$sgastat view in Oracle." }
metrics_type = { value='integer'}
fieldtoappend= "pool"
request = '''
SELECT
	POOL, SUM(BYTES) AS VALUE
FROM (
	SELECT LOWER(REPLACE(POOL, ' ', '_')) AS POOL,SUM(BYTES) AS BYTES FROM	V$SGASTAT
	WHERE POOL IN ('java pool', 'large pool') GROUP BY POOL
	UNION
	SELECT 'shared_pool',SUM(BYTES)	FROM V$SGASTAT
	WHERE POOL = 'shared pool' AND NAME NOT IN ('library cache', 'dictionary cache', 'free memory', 'sql area')
	UNION
	SELECT	NAME,BYTES FROM	V$SGASTAT WHERE POOL IS NULL AND NAME IN ('log_buffer', 'fixed_sga')
	UNION
	SELECT 'buffer_cache',SUM(BYTES) FROM V$SGASTAT WHERE POOL IS NULL	AND NAME IN ('buffer_cache', 'db_block_buffers')
	UNION
	SELECT
		DISTINCT *
	FROM
		TABLE(sys.ODCIVARCHAR2LIST('buffer_cache', 'fixed_sga', 'java_pool', 'large_pool', 'log_buffer', 'shared_pool')),
		TABLE(sys.ODCINUMBERLIST(0, 0, 0, 0, 0, 0))
	) GROUP BY POOL
'''

[[oracle-monitor.mgroup.metric]]
# Sessions 
context = "sessions"
metrics_desc = { value="Generic  and cooked metrics from v$session view in Oracle." }
metrics_type = { value='integer'}
fieldtoappend= "metric"
request = '''
SELECT METRIC, SUM(VALUE) AS VALUE 	FROM
  (
  SELECT 	LOWER(REPLACE(STATUS || ' ' || TYPE, ' ', '_')) AS METRIC, 	COUNT(*) AS VALUE
  FROM V$SESSION 	GROUP BY STATUS, TYPE
  UNION
  SELECT 
    DISTINCT *
  FROM
    TABLE(sys.ODCIVARCHAR2LIST('inactive_user', 'active_user', 'active_background')), 
    TABLE(sys.ODCINUMBERLIST(0, 0, 0))
  ) GROUP BY METRIC
UNION
  SELECT 'total' AS METRIC, COUNT(*) AS VALUE  FROM 	V$SESSION 
UNION
  SELECT 'long_time_locked' AS METRIC, COUNT(*) AS VALUE
  FROM V$SESSION
  WHERE
  BLOCKING_SESSION IS NOT NULL
  AND BLOCKING_SESSION_STATUS = 'VALID'
  AND SECONDS_IN_WAIT > 600
UNION
  SELECT 'lock_rate' ,(CNT_BLOCK / CNT_ALL) * 100 pct
  FROM
  (
  SELECT 	COUNT(*) CNT_BLOCK
  FROM V$SESSION
  WHERE BLOCKING_SESSION IS NOT NULL),
  (
  SELECT COUNT(*) CNT_ALL 
  FROM V$SESSION)
UNION
  SELECT 'concurrency_rate',	NVL(ROUND(SUM(duty_act.CNT * 100 / num_cores.VAL)), 0)
  FROM(
  SELECT
    DECODE(SESSION_STATE, 'ON CPU', 'CPU', WAIT_CLASS) WAIT_CLASS, ROUND(COUNT(*) / (60 * 15), 1) CNT
  FROM
    V$ACTIVE_SESSION_HISTORY sh
  WHERE
    sh.SAMPLE_TIME >= SYSDATE - 15 / 1440
    AND DECODE(SESSION_STATE, 'ON CPU', 'CPU', WAIT_CLASS) IN ('Concurrency')
  GROUP BY
    DECODE(SESSION_STATE, 'ON CPU', 'CPU', WAIT_CLASS)
  ) duty_act,
  (
  SELECT SUM(VALUE) VAL FROM V$OSSTAT
  WHERE STAT_NAME = 'NUM_CPU_CORES'
  ) num_cores
'''




[[oracle-monitor.mgroup.metric]]
# Systmetrics
# Getting only marked metrics with (*i) for integer or (*f) for floating point numbers

#  mid;REPLACE(LOWER(METRIC_NAME),' ','_')               ;     value;METRIC_UNIT
# ----;--------------------------------------------------;----------;--------------------------------------------------
# 2000;buffer_cache_hit_ratio(*f)                        ;       100;% (LogRead - PhyRead)/LogRead
# 2001;memory_sorts_ratio(*f)                            ;       100;% MemSort/(MemSort + DiskSort)
# 2002;redo_allocation_hit_ratio                         ;       100;% (#Redo - RedoSpaceReq)/#Redo
# 2003;user_transaction_per_sec                          ;         0;Transactions Per Second
# 2004;physical_reads_per_sec                            ;         0;Reads Per Second
# 2005;physical_reads_per_txn                            ;         0;Reads Per Txn
# 2006;physical_writes_per_sec                           ;         0;Writes Per Second
# 2007;physical_writes_per_txn                           ;         0;Writes Per Txn
# 2008;physical_reads_direct_per_sec                     ;         0;Reads Per Second
# 2009;physical_reads_direct_per_txn                     ;         0;Reads Per Txn
# 2010;physical_writes_direct_per_sec                    ;         0;Writes Per Second
# 2011;physical_writes_direct_per_txn                    ;         0;Writes Per Txn
# 2012;physical_reads_direct_lobs_per_sec                ;         0;Reads Per Second
# 2013;physical_reads_direct_lobs_per_txn                ;         0;Reads Per Txn
# 2014;physical_writes_direct_lobs_per_sec               ;         0;Writes Per Second
# 2015;physical_writes_direct_lobs__per_txn              ;         0;Writes Per Txn
# 2016;redo_generated_per_sec                            ;    2.3175;Bytes Per Second
# 2017;redo_generated_per_txn                            ;       140;Bytes Per Txn
# 2018;logons_per_sec(*f)                                ;    .13243;Logons Per Second
# 2019;logons_per_txn                                    ;         8;Logons Per Txn
# 2020;open_cursors_per_sec                              ;    .94355;Cursors Per Second
# 2021;open_cursors_per_txn                              ;        57;Cursors Per Txn
# 2022;user_commits_per_sec                              ;         0;Commits Per Second
# 2023;user_commits_percentage                           ;         0;% (UserCommit/TotalUserTxn)
# 2024;user_rollbacks_per_sec(*f)                        ;         0;Rollbacks Per Second
# 2025;user_rollbacks_percentage                         ;         0;% (UserRollback/TotalUserTxn)
# 2026;user_calls_per_sec                                ;    .94355;Calls Per Second
# 2027;user_calls_per_txn                                ;        57;Calls Per Txn
# 2028;recursive_calls_per_sec                           ;   8.69061;Calls Per Second
# 2029;recursive_calls_per_txn                           ;       525;Calls Per Txn
# 2030;logical_reads_per_sec                             ;   2.33405;Reads Per Second
# 2031;logical_reads_per_txn                             ;       141;Reads Per Txn
# 2032;dbwr_checkpoints_per_sec                          ;         0;Check Points Per Second
# 2033;background_checkpoints_per_sec                    ;         0;Check Points Per Second
# 2034;redo_writes_per_sec                               ;    .01655;Writes Per Second
# 2035;redo_writes_per_txn                               ;         1;Writes Per Txn
# 2036;long_table_scans_per_sec(*f)                      ;         0;Scans Per Second
# 2037;long_table_scans_per_txn                          ;         0;Scans Per Txn
# 2038;total_table_scans_per_sec                         ;    .06621;Scans Per Second
# 2039;total_table_scans_per_txn                         ;         4;Scans Per Txn
# 2040;full_index_scans_per_sec                          ;         0;Scans Per Second
# 2041;full_index_scans_per_txn                          ;         0;Scans Per Txn
# 2042;total_index_scans_per_sec                         ;    .84423;Scans Per Second
# 2043;total_index_scans_per_txn                         ;        51;Scans Per Txn
# 2044;total_parse_count_per_sec                         ;    .31452;Parses Per Second
# 2045;total_parse_count_per_txn                         ;        19;Parses Per Txn
# 2046;hard_parse_count_per_sec                          ;    .01655;Parses Per Second
# 2047;hard_parse_count_per_txn                          ;         1;Parses Per Txn
# 2048;parse_failure_count_per_sec                       ;         0;Parses Per Second
# 2049;parse_failure_count_per_txn                       ;         0;Parses Per Txn
# 2050;cursor_cache_hit_ratio(*f)                        ; 266.66667;% CursorCacheHit/SoftParse
# 2051;disk_sort_per_sec                                 ;         0;Sorts Per Second
# 2052;disk_sort_per_txn                                 ;         0;Sorts Per Txn
# 2053;rows_per_sort(*f)                                 ;     10.75;Rows Per Sort
# 2054;execute_without_parse_ratio                       ;  69.84127;% (ExecWOParse/TotalExec)
# 2055;soft_parse_ratio                                  ;  94.73684;% SoftParses/TotalParses
# 2056;user_calls_ratio                                  ;   9.79381;% UserCalls/AllCalls
# 2057;host_cpu_utilization_(%)                          ;   2.30796;% Busy/(Idle+Busy)
# 2058;network_traffic_volume_per_sec                    ;1057.57325;Bytes Per Second
# 2059;enqueue_timeouts_per_sec(*f)                      ;         0;Timeouts Per Second
# 2060;enqueue_timeouts_per_txn                          ;         0;Timeouts Per Txn
# 2061;enqueue_waits_per_sec                             ;         0;Waits Per Second
# 2062;enqueue_waits_per_txn                             ;         0;Waits Per Txn
# 2063;enqueue_deadlocks_per_sec                         ;         0;Deadlocks Per Second
# 2064;enqueue_deadlocks_per_txn                         ;         0;Deadlocks Per Txn
# 2065;enqueue_requests_per_sec                          ;  11.53782;Requests Per Second
# 2066;enqueue_requests_per_txn                          ;       697;Requests Per Txn
# 2067;db_block_gets_per_sec                             ;     .2152;Blocks Per Second
# 2068;db_block_gets_per_txn                             ;        13;Blocks Per Txn
# 2069;consistent_read_gets_per_sec                      ;   2.11885;Blocks Per Second
# 2070;consistent_read_gets_per_txn                      ;       128;Blocks Per Txn
# 2071;db_block_changes_per_sec                          ;         0;Blocks Per Second
# 2072;db_block_changes_per_txn                          ;         0;Blocks Per Txn
# 2073;consistent_read_changes_per_sec                   ;         0;Blocks Per Second
# 2074;consistent_read_changes_per_txn                   ;         0;Blocks Per Txn
# 2075;cpu_usage_per_sec                                 ;    .75692;CentiSeconds Per Second
# 2076;cpu_usage_per_txn                                 ;   45.7257;CentiSeconds Per Txn
# 2077;cr_blocks_created_per_sec                         ;         0;Blocks Per Second
# 2078;cr_blocks_created_per_txn                         ;         0;Blocks Per Txn
# 2079;cr_undo_records_applied_per_sec                   ;         0;Undo Records Per Second
# 2080;cr_undo_records_applied_per_txn                   ;         0;Records Per Txn
# 2081;user_rollback_undorec_applied_per_sec             ;         0;Records Per Second
# 2082;user_rollback_undo_records_applied_per_txn        ;         0;Records Per Txn
# 2083;leaf_node_splits_per_sec                          ;         0;Splits Per Second
# 2084;leaf_node_splits_per_txn                          ;         0;Splits Per Txn
# 2085;branch_node_splits_per_sec                        ;         0;Splits Per Second
# 2086;branch_node_splits_per_txn                        ;         0;Splits Per Txn
# 2087;px_downgraded_1_to_25%_per_sec                    ;         0;PX Operations Per Second
# 2088;px_downgraded_25_to_50%_per_sec                   ;         0;PX Operations Per Second
# 2089;px_downgraded_50_to_75%_per_sec                   ;         0;PX Operations Per Second
# 2090;px_downgraded_75_to_99%_per_sec                   ;         0;PX Operations Per Second
# 2091;px_downgraded_to_serial_per_sec                   ;         0;PX Operations Per Second
# 2092;physical_read_total_io_requests_per_sec           ;   3.12862;Requests Per Second
# 2093;physical_read_total_bytes_per_sec                 ;51259.3279;Bytes Per Second
# 2094;gc_cr_block_received_per_second                   ;         0;Blocks Per Second
# 2095;gc_cr_block_received_per_txn                      ;         0;Blocks Per Txn
# 2096;gc_current_block_received_per_second              ;         0;Blocks Per Second
# 2097;gc_current_block_received_per_txn                 ;         0;Blocks Per Txn
# 2098;global_cache_average_cr_get_time                  ;         0;CentiSeconds Per Get
# 2099;global_cache_average_current_get_time             ;         0;CentiSeconds Per Get
# 2100;physical_write_total_io_requests_per_sec          ;    .82768;Requests Per Second
# 2101;global_cache_blocks_corrupted(*i)                 ;         0;Blocks
# 2102;global_cache_blocks_lost(*i)                      ;         0;Blocks
# 2103;current_logons_count                              ;        95;Logons
# 2104;current_open_cursors_count                        ;       147;Cursors
# 2105;user_limit_%                                      ;         0;% Sessions/License_Limit
# 2106;sql_service_response_time(*f)                     ;   1.50134;CentiSeconds Per Call
# 2107;database_wait_time_ratio(*f)                      ;  94.76692;% Wait/DB_Time
# 2108;database_cpu_time_ratio(*f)                       ;   5.23308;% Cpu/DB_Time
# 2109;response_time_per_txn                             ;  873.7824;CentiSeconds Per Txn
# 2110;row_cache_hit_ratio                               ;       100;% Hits/Gets
# 2111;row_cache_miss_ratio                              ;         0;% Misses/Gets
# 2112;library_cache_hit_ratio(*f)                       ;  95.76271;% Hits/Pins
# 2113;library_cache_miss_ratio                          ;   4.23729;% Misses/Gets
# 2114;shared_pool_free_%(*f)                            ;   9.66625;% Free/Total
# 2115;pga_cache_hit_%                                   ;       100;% Bytes/TotalBytes
# 2118;process_limit_%                                   ;  14.52381;% Processes/Limit
# 2119;session_limit_%                                   ;  11.47287;% Sessions/Limit
# 2120;executions_per_txn                                ;        63;Executes Per Txn
# 2121;executions_per_sec                                ;   1.04287;Executes Per Second
# 2122;txns_per_logon                                    ;         0;Txns Per Logon
# 2123;database_time_per_sec                             ;   14.4642;CentiSeconds Per Second
# 2124;physical_write_total_bytes_per_sec                ;13035.1929;Bytes Per Second
# 2125;physical_read_io_requests_per_sec(*f)             ;         0;Requests Per Second
# 2126;physical_read_bytes_per_sec(*f)                   ;         0;Bytes Per Second
# 2127;physical_write_io_requests_per_sec(*f)            ;         0;Requests Per Second
# 2128;physical_write_bytes_per_sec(*f)                  ;         0;Bytes Per Second
# 2129;db_block_changes_per_user_call                    ;         0;Blocks Per Call
# 2130;db_block_gets_per_user_call                       ;    .22807;Blocks Per Call
# 2131;executions_per_user_call                          ;   1.10526;Executes Per Call
# 2132;logical_reads_per_user_call                       ;   2.47368;Reads Per Call
# 2133;total_sorts_per_user_call(*f)                     ;    .07018;Sorts Per Call
# 2134;total_table_scans_per_user_call                   ;    .07018;Tables Per Call
# 2135;current_os_load                                   ;    .25977;Number Of Processes
# 2136;streams_pool_usage_percentage                     ;         0;% Memory allocated / Size of Streams pool
# 2137;pq_qc_session_count                               ;         0;Sessions
# 2138;pq_slave_session_count                            ;         0;Sessions
# 2139;queries_parallelized_per_sec                      ;         0;Queries Per Second
# 2140;dml_statements_parallelized_per_sec               ;         0;Statements Per Second
# 2141;ddl_statements_parallelized_per_sec               ;         0;Statements Per Second
# 2142;px_operations_not_downgraded_per_sec              ;         0;PX Operations Per Second
# 2143;session_count                                     ;       148;Sessions
# 2144;average_synchronous_single-block_read_latency     ;    .02632;Milliseconds
# 2145;i/o_megabytes_per_second                          ;    .06621;Megabtyes per Second
# 2146;i/o_requests_per_second                           ;   4.05562;Requests per Second
# 2147;average_active_sessions(*f)                       ;    .14464;Active Sessions
# 2148;active_serial_sessions(*i)                        ;         1;Sessions
# 2149;active_parallel_sessions(*i)                      ;         0;Sessions
# 2150;captured_user_calls                               ;         0;calls
# 2151;replayed_user_calls                               ;         0;calls
# 2152;workload_capture_and_replay_status                ;         0;status
# 2153;background_cpu_usage_per_sec                      ;   4.64164;CentiSeconds Per Second
# 2154;background_time_per_sec                           ;    .02887;Active Sessions
# 2155;host_cpu_usage_per_sec                            ;  45.73746;CentiSeconds Per Second
# 2156;cell_physical_io_interconnect_bytes               ;   3884032;bytes
# 2157;temp_space_used                                   ;         0;bytes
# 2158;total_pga_allocated                               ;1591926784;bytes
# 2159;total_pga_used_by_sql_workareas                   ;         0;bytes
# 2160;run_queue_per_sec                                 ;         0;Processes
# 2161;vm_in_bytes_per_sec                               ;         0;bytes per sec
# 2162;vm_out_bytes_per_sec                              ;         0;bytes per sec
context = "sysmetrics"
metrics_desc = { value="Generic  metric from v$sysmetrics view in Oracle." }
metrics_type = { value='float'}  # most of metrics are floating point numbers
fieldtoappend= "metric"
request = '''
SELECT REPLACE(LOWER(METRIC_NAME),' ','_') AS metric, VALUE
 FROM V$SYSMETRIC WHERE
 METRIC_ID IN (
    2000,2001,2018,2024,2036,2050,
    2053,2059,2101,2102,2106,2107,
    2108,2112,2114,2119,2125,2126,
    2127,2128,2133,2147,2148,2149)
 AND GROUP_ID=2
'''

[[oracle-monitor.mgroup]]

name ="BaseMetrics_1h_DB"
query_level = "db"
query_period = "1h"
query_timeout = "30m"

[[oracle-monitor.mgroup.metric]]
# RedoLog
context = "datafile"
metrics_desc = { value="Current number of datafile." }
metrics_type = { datafile_num='integer'}
request = '''
SELECT
    COUNT(*) as datafile_num
FROM
    V$DATAFILE
'''
[[oracle-monitor.mgroup.metric]]
id = "tablespace_goet_12.1"
# Tablespaces => 12.1
oracle_version_greater_or_equal_than = "12.1"
#oracle_version_less_than = "25"
context = "tablespace"
labels = [ "tablespace_name", "contents","pdb_name","autoextensible","bigfile" ]
metrics_desc = { value="statistics usage for each tablespace" }
metrics_type = { file_bytes = 'integer', max_bytes = 'integer', free_bytes='integer',used_bytes='integer',used_pct_max='float',used_file_pct='float',status='integer'}
request = '''
SELECT 
    x.TABLESPACE_NAME,
    NVL2(p.NAME,p.NAME,DECODE(x.CON_ID,0,'CDB',1,'CDB$ROOT')) as PDB_NAME,
    x.AUTOEXTENSIBLE,
    x.CONTENTS,
    x.BIGFILE,
    x.FILE_BYTES,
    x.MAX_BYTES,
    x.FREE_BYTES,
    x.USED_BYTES,
    x.USED_PCT_MAX,
    x.USED_FILE_PCT,
    x.STATUS
FROM (
SELECT
    df.TABLESPACE_NAME AS TABLESPACE_NAME,
    df.CON_ID AS CON_ID,
    df.AUTOEXTENSIBLE,
    df.CONTENTS AS CONTENTS,
    df.BIGFILE,
    NVL(SUM(df.BYTES), 0) AS FILE_BYTES,
    NVL(SUM(df.MAX_BYTES), 0) AS MAX_BYTES,
    NVL(SUM(f.FREE), 0) AS FREE_BYTES,
    SUM(df.BYTES)-SUM(f.FREE) AS USED_BYTES,
    ROUND(DECODE(SUM(df.MAX_BYTES), 0, 0, (SUM(df.BYTES) / SUM(df.MAX_BYTES) * 100)), 2) AS USED_PCT_MAX,
    ROUND(DECODE(SUM(df.BYTES), 0, 0, (SUM(df.BYTES)-SUM(f.FREE)) / SUM(df.BYTES)* 100), 2) AS USED_FILE_PCT,
    DECODE(df.STATUS, 'ONLINE', 1, 'OFFLINE', 2, 'READ ONLY', 3, 0) AS STATUS
FROM
    (
    SELECT
        ddf.FILE_ID,
        dt.CON_ID,
        dt.BIGFILE,
        dt.CONTENTS,
        dt.STATUS,
        ddf.FILE_NAME,
        ddf.TABLESPACE_NAME,
        ddf.AUTOEXTENSIBLE,
        TRUNC(ddf.BYTES) AS BYTES,
        TRUNC(GREATEST(ddf.BYTES, ddf.MAXBYTES)) AS MAX_BYTES
    FROM
        CDB_DATA_FILES ddf,
        CDB_TABLESPACES dt
    WHERE
        ddf.TABLESPACE_NAME = dt.TABLESPACE_NAME
    ) df,
    (
    SELECT
        TRUNC(SUM(BYTES)) AS FREE,
        FILE_ID
    FROM
        CDB_FREE_SPACE
    GROUP BY
        FILE_ID
    ) f
WHERE
    df.FILE_ID = f.FILE_ID (+)
GROUP BY
    df.TABLESPACE_NAME, df.CONTENTS, df.STATUS, df.BIGFILE,df.CON_ID,df.AUTOEXTENSIBLE
UNION ALL
SELECT
    Y.NAME AS TABLESPACE_NAME,
    Y.CON_ID AS CON_ID,
    Y.AUTOEXTENSIBLE,
    Y.CONTENTS AS CONTENTS,
    Y.BIGFILE,
    NVL(SUM(Y.BYTES), 0) AS FILE_BYTES,
    NVL(SUM(Y.MAX_BYTES), 0) AS MAX_BYTES,
    NVL(MAX(NVL(Y.FREE_BYTES, 0)), 0) AS FREE,
    SUM(Y.BYTES)-MAX(Y.FREE_BYTES) AS USED_BYTES,
    ROUND(DECODE(SUM(Y.MAX_BYTES), 0, 0, (SUM(Y.BYTES) / SUM(Y.MAX_BYTES) * 100)), 2) AS USED_PCT_MAX,
    ROUND(DECODE(SUM(Y.BYTES), 0, 0, (SUM(Y.BYTES)-MAX(Y.FREE_BYTES)) / SUM(Y.BYTES)* 100), 2) AS USED_FILE_PCT,
    DECODE(Y.TBS_STATUS, 'ONLINE', 1, 'OFFLINE', 2, 'READ ONLY', 3, 0) AS STATUS
FROM
    (
    SELECT
        dtf.TABLESPACE_NAME AS NAME,
        dt.CONTENTS,
        dt.CON_ID,
        dt.BIGFILE,
        dtf.AUTOEXTENSIBLE,
        dt.STATUS AS TBS_STATUS,
        dtf.STATUS AS STATUS,
        dtf.BYTES AS BYTES,
        (
        SELECT
            ((f.TOTAL_BLOCKS - s.TOT_USED_BLOCKS) * vp.VALUE)
        FROM
            (
            SELECT
                TABLESPACE_NAME, SUM(USED_BLOCKS) TOT_USED_BLOCKS
            FROM
                GV$SORT_SEGMENT
            WHERE
                TABLESPACE_NAME != 'DUMMY'
            GROUP BY
                TABLESPACE_NAME) s, (
            SELECT
                TABLESPACE_NAME, SUM(BLOCKS) TOTAL_BLOCKS
            FROM
                CDB_TEMP_FILES
            WHERE
                TABLESPACE_NAME != 'DUMMY'
            GROUP BY
                TABLESPACE_NAME) f, (
            SELECT
                VALUE
            FROM
                V$PARAMETER
            WHERE
                NAME = 'db_block_size') vp
        WHERE
            f.TABLESPACE_NAME = s.TABLESPACE_NAME
            AND f.TABLESPACE_NAME = dtf.TABLESPACE_NAME
        ) AS FREE_BYTES,
        CASE
            WHEN dtf.MAXBYTES = 0 THEN dtf.BYTES
            ELSE dtf.MAXBYTES
        END AS MAX_BYTES
    FROM
        sys.CDB_TEMP_FILES dtf,
        sys.CDB_TABLESPACES dt
    WHERE
        dtf.TABLESPACE_NAME = dt.TABLESPACE_NAME ) Y
GROUP BY
    Y.NAME, Y.CONTENTS, Y.TBS_STATUS, Y.CON_ID, Y.BIGFILE, Y.AUTOEXTENSIBLE
) x left outer join v$pdbs p
ON x.CON_ID = p.CON_ID
'''

[[oracle-monitor.mgroup.metric]]
id = "tablespace_lt_12.1"
# Tablespaces < 12.1
oracle_version_less_than = "12.1"
context = "tablespace"
labels = [ "tablespace_name", "contents","autoextensible","bigfile" ]
metrics_desc = { value="statistics usage for each tablespace" }
metrics_type = { file_bytes = 'integer', max_bytes = 'integer', free_bytes='integer',used_bytes='integer',used_pct_max='float',used_file_pct='float',status='integer'}
request = '''
SELECT
    df.TABLESPACE_NAME AS TABLESPACE_NAME,
    df.AUTOEXTENSIBLE,
    df.CONTENTS AS CONTENTS,
    df.BIGFILE,
    NVL(SUM(df.BYTES), 0) AS FILE_BYTES,
    NVL(SUM(df.MAX_BYTES), 0) AS MAX_BYTES,
    NVL(SUM(f.FREE), 0) AS FREE_BYTES,
    SUM(df.BYTES)-SUM(f.FREE) AS USED_BYTES,
    ROUND(DECODE(SUM(df.MAX_BYTES), 0, 0, (SUM(df.BYTES) / SUM(df.MAX_BYTES) * 100)), 2) AS USED_PCT_MAX,
    ROUND(DECODE(SUM(df.BYTES), 0, 0, (SUM(df.BYTES)-SUM(f.FREE)) / SUM(df.BYTES)* 100), 2) AS USED_FILE_PCT,
    DECODE(df.STATUS, 'ONLINE', 1, 'OFFLINE', 2, 'READ ONLY', 3, 0) AS STATUS
FROM
    (
    SELECT
        ddf.FILE_ID,
        dt.BIGFILE,
        dt.CONTENTS,
        dt.STATUS,
        ddf.FILE_NAME,
        ddf.TABLESPACE_NAME,
        ddf.AUTOEXTENSIBLE,
        TRUNC(ddf.BYTES) AS BYTES,
        TRUNC(GREATEST(ddf.BYTES, ddf.MAXBYTES)) AS MAX_BYTES
    FROM
        DBA_DATA_FILES ddf,
        DBA_TABLESPACES dt
    WHERE
        ddf.TABLESPACE_NAME = dt.TABLESPACE_NAME 
    ) df,
    (
    SELECT
        TRUNC(SUM(BYTES)) AS FREE,
        FILE_ID
    FROM
        DBA_FREE_SPACE
    GROUP BY
        FILE_ID
    ) f
WHERE
    df.FILE_ID = f.FILE_ID (+)
GROUP BY
    df.TABLESPACE_NAME, df.CONTENTS, df.STATUS, df.BIGFILE,df.AUTOEXTENSIBLE
UNION ALL
SELECT
    Y.NAME AS TABLESPACE_NAME,
    Y.AUTOEXTENSIBLE,
    Y.CONTENTS AS CONTENTS,
    Y.BIGFILE,
    NVL(SUM(Y.BYTES), 0) AS FILE_BYTES,
    NVL(SUM(Y.MAX_BYTES), 0) AS MAX_BYTES,
    NVL(MAX(NVL(Y.FREE_BYTES, 0)), 0) AS FREE,
    SUM(Y.BYTES)-MAX(Y.FREE_BYTES) AS USED_BYTES,
    ROUND(DECODE(SUM(Y.MAX_BYTES), 0, 0, (SUM(Y.BYTES) / SUM(Y.MAX_BYTES) * 100)), 2) AS USED_PCT_MAX,
    ROUND(DECODE(SUM(Y.BYTES), 0, 0, (SUM(Y.BYTES)-MAX(Y.FREE_BYTES)) / SUM(Y.BYTES)* 100), 2) AS USED_FILE_PCT,
    DECODE(Y.TBS_STATUS, 'ONLINE', 1, 'OFFLINE', 2, 'READ ONLY', 3, 0) AS STATUS
FROM
    (
    SELECT
        dtf.TABLESPACE_NAME AS NAME,
        dt.CONTENTS,
        dt.BIGFILE,
        dtf.AUTOEXTENSIBLE,
        dt.STATUS AS TBS_STATUS,
        dtf.STATUS AS STATUS,
        dtf.BYTES AS BYTES,
        (
        SELECT
            ((f.TOTAL_BLOCKS - s.TOT_USED_BLOCKS) * vp.VALUE)
        FROM
            (
            SELECT
                TABLESPACE_NAME, SUM(USED_BLOCKS) TOT_USED_BLOCKS
            FROM
                GV$SORT_SEGMENT
            WHERE
                TABLESPACE_NAME != 'DUMMY'
            GROUP BY
                TABLESPACE_NAME) s, (
            SELECT
                TABLESPACE_NAME, SUM(BLOCKS) TOTAL_BLOCKS
            FROM
                DBA_TEMP_FILES
            WHERE
                TABLESPACE_NAME != 'DUMMY'
            GROUP BY
                TABLESPACE_NAME) f, (
            SELECT
                VALUE
            FROM
                V$PARAMETER
            WHERE
                NAME = 'db_block_size') vp
        WHERE
            f.TABLESPACE_NAME = s.TABLESPACE_NAME
            AND f.TABLESPACE_NAME = dtf.TABLESPACE_NAME
        ) AS FREE_BYTES,
        CASE
            WHEN dtf.MAXBYTES = 0 THEN dtf.BYTES
            ELSE dtf.MAXBYTES
        END AS MAX_BYTES
    FROM
        sys.DBA_TEMP_FILES dtf,
        sys.DBA_TABLESPACES dt
    WHERE
        dtf.TABLESPACE_NAME = dt.TABLESPACE_NAME ) Y
GROUP BY
    Y.NAME, Y.CONTENTS, Y.TBS_STATUS, Y.BIGFILE,Y.AUTOEXTENSIBLE
'''

[[oracle-monitor.mgroup.metric]]
# ASM Disk Groups
context = "asm_dg"
labels = [ "dg_name"]
metrics_desc = { value="statistics usage for each ASM DiskGroup" }
metrics_type = { total_bytes = 'integer',  free_bytes='integer',used_pct='float'}
request = '''
SELECT
   NAME as DG_NAME,
   ROUND(TOTAL_MB / DECODE(TYPE, 'EXTERN', 1, 'NORMAL', 2, 'HIGH', 3) * 1024 * 1024) as TOTAL_BYTES,
   ROUND(USABLE_FILE_MB * 1024 * 1024) as FREE_BYTES,
   ROUND(100 - (USABLE_FILE_MB / (TOTAL_MB / 
                    DECODE(TYPE, 'EXTERN', 1, 'NORMAL', 2, 'HIGH', 3))) * 100, 2) as USED_PCT
 FROM 
    V$ASM_DISKGROUP
'''

[[oracle-monitor.mgroup]]

name ="CustomMetrics_1h_DB"
query_level = "db"
query_period = "1h"
query_timeout = "10m"


[[oracle-monitor.mgroup.metric]]
context = "query_stats"
labels = [ "schema_name"]
metrics_desc = { p95_time_usecs= "Gauge metric with percentile 95 of elapsed time.", p99_time_usecs= "Gauge metric with percentile 99 of elapsed time." }
metrics_type = { elapsed_time_avg='float', elapsed_time_p95='float', elapsed_time_p99='float',rows_processed_avg='integer', rows_processed_p95='integer', rows_processed_p99='integer'}
request = '''
SELECT parsing_schema_name as schema_name,
    round(avg(elapsed_time)/1000000,6) as elapsed_time_avg,
    round(avg(ROWS_PROCESSED)) as rows_processed_avg,
    ROUND(PERCENTILE_DISC(0.95) WITHIN GROUP (ORDER BY elapsed_time/1000000),6) elapsed_time_p95,
    ROUND(PERCENTILE_DISC(0.95) WITHIN GROUP (ORDER BY ROWS_PROCESSED)) rows_processed_p95,
    ROUND(PERCENTILE_DISC(0.99) WITHIN GROUP (ORDER BY elapsed_time/1000000),6) elapsed_time_p99,
    ROUND(PERCENTILE_DISC(0.99) WITHIN GROUP (ORDER BY ROWS_PROCESSED)) rows_processed_p99
FROM v$sql
where last_active_time >= SYSDATE - INTERVAL '1' HOUR
GROUP BY parsing_schema_name
ORDER BY parsing_schema_name
'''

